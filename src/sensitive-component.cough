{ getInjectedFactory }         = require './factory-injector'
{ createClass, createFactory } = require 'react'

encapsulateInfo = (component, state) ->
  { component, state }

sensitiveRenderMixin = \getHandlerForType ->
  trigger = (component, state) ->
    getHandlerForType 'onStateChange' (encapsulateInfo (component, state))

  componentDidMount    : -> trigger (this, 'didMount')
  componentWillUnmount : -> trigger (this, 'willUnmount')

template = (getHandlerForType) -> (DOMFactory, mixins...) ->
  _components   = null
  _DOMProps     = null
  getComponents = -> _components
  getDOMProps   = -> _DOMProps

  sensitiveProps =
    mixins : mixins.concat([sensitiveRenderMixin getHandlerForType])
    render : -> DOMFactory (getDOMProps(), getComponents()...)

  sensitiveFactory = createFactory (createClass sensitiveProps)

  (DOMProps, components...) ->
    { sensitiveProps } = DOMProps
    delete DOMProps.sensitiveProps

    _DOMProps   = DOMProps
    _components = components

    sensitiveFactory sensitiveProps

sensitize = getInjectedFactory (template, 'sensitive')

module.exports = sensitize
